{"version":3,"sources":["algebraicGameClient.js"],"names":["getNotationPrefix","src","dest","movesForPiece","containsDest","squares","n","length","file","fileHash","i","prefix","piece","notation","rank","rankHash","getValidMovesByPieceType","pieceType","validMoves","byPiece","type","push","notate","gameClient","algebraicNotation","isPromotion","p","sq","suffix","PieceType","Pawn","join","Bishop","Knight","Queen","Rook","King","PGN","parseNotation","captureRegex","parseDest","substring","test","charAt","updateGameClient","validation","start","err","result","Error","isCheck","isCheckmate","isRepetition","isStalemate","notatedMoves","AlgebraicGameClient","game","opts","GameValidation","create","ev","on","data","emit","board","self","getStatus","forceUpdate","getFen","isFuzzy","move","notationRegex","promo","side","getCurrentSide","replace","match","Piece","createBishop","createKnight","createQueen","createRook","createPawn","promote","postSquare","Game","EventEmitter"],"mappings":"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","sourcesContent":["import { Piece, PieceType } from './piece';\nimport { EventEmitter } from 'events';\nimport { Game } from './game';\nimport { GameValidation } from './gameValidation';\n\n// private methods\nfunction getNotationPrefix (src, dest, movesForPiece) {\n\tlet\n\t\tcontainsDest = (squares) => {\n\t\t\tlet n = 0;\n\n\t\t\tfor (; n < squares.length; n++) {\n\t\t\t\tif (squares[n] === dest) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn false;\n\t\t},\n\t\tfile = '',\n\t\tfileHash = {},\n\t\ti = 0,\n\t\tprefix = src.piece.notation,\n\t\trank = 0,\n\t\trankHash = {};\n\n\tfor (; i < movesForPiece.length; i++) {\n\t\tif (containsDest(movesForPiece[i].squares)) {\n\t\t\tfile = movesForPiece[i].src.file;\n\t\t\trank = movesForPiece[i].src.rank;\n\n\t\t\tfileHash[file] = (typeof fileHash[file] !== 'undefined' ? fileHash[file] + 1 : 1);\n\t\t\trankHash[rank] = (typeof rankHash[rank] !== 'undefined' ? rankHash[rank] + 1 : 1);\n\t\t}\n\t}\n\n\tif (Object.keys(fileHash).length > 1) {\n\t\tprefix += src.file;\n\t}\n\n\tif (Object.keys(rankHash).length > Object.keys(fileHash).length) {\n\t\tprefix += src.rank;\n\t}\n\n\treturn prefix;\n}\n\nfunction getValidMovesByPieceType (pieceType, validMoves) {\n\tlet\n\t\tbyPiece = [],\n\t\ti = 0;\n\n\tfor (; i < validMoves.length; i++) {\n\t\tif (validMoves[i].src.piece.type === pieceType) {\n\t\t\tbyPiece.push(validMoves[i]);\n\t\t}\n\t}\n\n\treturn byPiece;\n}\n\nfunction notate (validMoves, gameClient) {\n\tlet\n\t\talgebraicNotation = {},\n\t\ti = 0,\n\t\tisPromotion = false,\n\t\tmovesForPiece = [],\n\t\tn = 0,\n\t\tp = null,\n\t\tprefix = '',\n\t\tsq = null,\n\t\tsrc = null,\n\t\tsuffix = '';\n\n\t// iterate through each starting squares valid moves\n\tfor (; i < validMoves.length; i++) {\n\t\tsrc = validMoves[i].src;\n\t\tp = src.piece;\n\n\t\t// iterate each potential move and build prefix and suffix for notation\n\t\tfor (n = 0; n < validMoves[i].squares.length; n++) {\n\t\t\tprefix = '';\n\t\t\tsq = validMoves[i].squares[n];\n\n\t\t\t// set suffix for notation\n\t\t\tsuffix = (sq.piece ? 'x' : '') + sq.file + sq.rank;\n\n\t\t\t// check for potential promotion\n\t\t\t/* eslint no-magic-numbers: 0 */\n\t\t\tisPromotion =\n\t\t\t\t(sq.rank === 8 || sq.rank === 1) &&\n\t\t\t\tp.type === PieceType.Pawn;\n\n\t\t\t// squares with pawns\n\t\t\tif (sq.piece && p.type === PieceType.Pawn) {\n\t\t\t\tprefix = src.file;\n\t\t\t}\n\n\t\t\t// en passant\n\t\t\t// fix for #53\n\t\t\tif (p.type === PieceType.Pawn &&\n\t\t\t\tsrc.file !== sq.file &&\n\t\t\t\t!sq.piece) {\n\t\t\t\tprefix = [src.file, 'x'].join('');\n\t\t\t}\n\n\t\t\t// squares with Bishop, Knight, Queen or Rook pieces\n\t\t\tif (p.type === PieceType.Bishop ||\n\t\t\t\tp.type === PieceType.Knight ||\n\t\t\t\tp.type === PieceType.Queen ||\n\t\t\t\tp.type === PieceType.Rook) {\n\t\t\t\t// if there is more than 1 of the specified piece on the board,\n\t\t\t\t// can more than 1 land on the specified square?\n\t\t\t\tmovesForPiece = getValidMovesByPieceType(p.type, validMoves);\n\t\t\t\tif (movesForPiece.length > 1) {\n\t\t\t\t\tprefix = getNotationPrefix(src, sq, movesForPiece);\n\t\t\t\t} else {\n\t\t\t\t\tprefix = src.piece.notation;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// squares with a King piece\n\t\t\tif (p.type === PieceType.King) {\n\t\t\t\t// look for castle left and castle right\n\t\t\t\tif (src.file === 'e' && sq.file === 'g') {\n\t\t\t\t\t// fix for issue #13 - if PGN is specified should be letters, not numbers\n\t\t\t\t\tprefix = gameClient.PGN ? 'O-O' : '0-0';\n\t\t\t\t\tsuffix = '';\n\t\t\t\t} else if (src.file === 'e' && sq.file === 'c') {\n\t\t\t\t\t// fix for issue #13 - if PGN is specified should be letters, not numbers\n\t\t\t\t\tprefix = gameClient.PGN ? 'O-O-O' : '0-0-0';\n\t\t\t\t\tsuffix = '';\n\t\t\t\t} else {\n\t\t\t\t\tprefix = src.piece.notation;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// set the notation\n\t\t\tif (isPromotion) {\n\t\t\t\t// Rook promotion\n\t\t\t\talgebraicNotation[prefix + suffix + 'R'] = {\n\t\t\t\t\tdest : sq,\n\t\t\t\t\tsrc\n\t\t\t\t};\n\n\t\t\t\t// Knight promotion\n\t\t\t\talgebraicNotation[prefix + suffix + 'N'] = {\n\t\t\t\t\tdest : sq,\n\t\t\t\t\tsrc\n\t\t\t\t};\n\n\t\t\t\t// Bishop promotion\n\t\t\t\talgebraicNotation[prefix + suffix + 'B'] = {\n\t\t\t\t\tdest : sq,\n\t\t\t\t\tsrc\n\t\t\t\t};\n\n\t\t\t\t// Queen promotion\n\t\t\t\talgebraicNotation[prefix + suffix + 'Q'] = {\n\t\t\t\t\tdest : sq,\n\t\t\t\t\tsrc\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\talgebraicNotation[prefix + suffix] = {\n\t\t\t\t\tdest : sq,\n\t\t\t\t\tsrc\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n\n\treturn algebraicNotation;\n}\n\nfunction parseNotation (notation) {\n\tlet\n\t\tcaptureRegex = /^[a-h]x[a-h][1-8]$/,\n\t\tparseDest = '';\n\n\t// try and parse the notation\n\tparseDest = notation.substring(notation.length - 2);\n\n\tif (notation.length > 2) {\n\t\t// check for preceding pawn capture style notation (i.e. a-h x)\n\t\tif (captureRegex.test(notation)) {\n\t\t\treturn parseDest;\n\t\t}\n\n\t\treturn notation.charAt(0) + parseDest;\n\t}\n\n\treturn '';\n}\n\nfunction updateGameClient (gameClient) {\n\tgameClient.validation.start((err, result) => {\n\t\tif (err) {\n\t\t\tthrow new Error(err);\n\t\t}\n\n\t\tgameClient.isCheck = result.isCheck;\n\t\tgameClient.isCheckmate = result.isCheckmate;\n\t\tgameClient.isRepetition = result.isRepetition;\n\t\tgameClient.isStalemate = result.isStalemate;\n\t\tgameClient.notatedMoves = notate(result.validMoves, gameClient);\n\t\tgameClient.validMoves = result.validMoves;\n\t});\n}\n\nexport class AlgebraicGameClient extends EventEmitter {\n\tconstructor (game, opts) {\n\t\tsuper();\n\n\t\tthis.game = game;\n\t\tthis.isCheck = false;\n\t\tthis.isCheckmate = false;\n\t\tthis.isRepetition = false;\n\t\tthis.isStalemate = false;\n\t\tthis.notatedMoves = {};\n\t\t// for issue #13, adding options allowing consumers to specify\n\t\t// PGN (Portable Game Notation)... essentially, this makes castle moves\n\t\t// appear as capital letter O rather than the number 0\n\t\tthis.PGN = (opts && typeof opts.PGN === 'boolean') ? opts.PGN : false;\n\t\tthis.validMoves = [];\n\t\tthis.validation = GameValidation.create(this.game);\n\n\t\t// bubble the game and board events\n\t\t['check', 'checkmate'].forEach((ev) => {\n\t\t\tthis.game.on(ev, (data) => this.emit(ev, data));\n\t\t});\n\n\t\t['capture', 'castle', 'enPassant', 'move', 'promote', 'undo'].forEach((ev) => {\n\t\t\tthis.game.board.on(ev, (data) => this.emit(ev, data));\n\t\t});\n\n\t\tlet self = this;\n\t\tthis.on('undo', () => {\n\t\t\t// force an update\n\t\t\tself.getStatus(true);\n\t\t});\n\t}\n\n\tstatic create (opts) {\n\t\tlet\n\t\t\tgame = Game.create(),\n\t\t\tgameClient = new AlgebraicGameClient(game, opts);\n\n\t\tupdateGameClient(gameClient);\n\n\t\treturn gameClient;\n\t}\n\n\tgetStatus (forceUpdate) {\n\t\tif (forceUpdate) {\n\t\t\tupdateGameClient(this);\n\t\t}\n\n\t\treturn {\n\t\t\tboard : this.game.board,\n\t\t\tisCheck : this.isCheck,\n\t\t\tisCheckmate : this.isCheckmate,\n\t\t\tisRepetition : this.isRepetition,\n\t\t\tisStalemate : this.isStalemate,\n\t\t\tnotatedMoves : this.notatedMoves\n\t\t};\n\t}\n\n\tgetFen () {\n\t\treturn this.game.board.getFen();\n\t}\n\n\tmove (notation, isFuzzy) {\n\t\tlet\n\t\t\tmove = null,\n\t\t\tnotationRegex = /^[BKQNR]?[a-h]?[1-8]?[x-]?[a-h][1-8][+#]?$/,\n\t\t\tp = null,\n\t\t\tpromo = '',\n\t\t\tside = this.game.getCurrentSide();\n\n\t\tif (notation && typeof notation === 'string') {\n\t\t\t// clean notation of extra or alternate chars\n\t\t\tnotation = notation\n\t\t\t\t.replace(/\\!/g, '')\n\t\t\t\t.replace(/\\+/g, '')\n\t\t\t\t.replace(/\\#/g, '')\n\t\t\t\t.replace(/\\=/g, '')\n\t\t\t\t.replace(/\\\\/g, '');\n\n\t\t\t// fix for issue #13 - if PGN is specified, should be letters not numbers\n\t\t\tif (this.PGN) {\n\t\t\t\tnotation = notation.replace(/0/g, 'O');\n\t\t\t} else {\n\t\t\t\tnotation = notation.replace(/O/g, '0');\n\t\t\t}\n\n\t\t\t// check for pawn promotion\n\t\t\tif (notation.charAt(notation.length - 1).match(/[BNQR]/)) {\n\t\t\t\tpromo = notation.charAt(notation.length - 1);\n\t\t\t}\n\n\t\t\t// use it directly or attempt to parse it if not found\n\t\t\tif (this.notatedMoves[notation]) {\n\t\t\t\tmove = this.game.board.move(\n\t\t\t\t\tthis.notatedMoves[notation].src,\n\t\t\t\t\tthis.notatedMoves[notation].dest,\n\t\t\t\t\tnotation);\n\t\t\t} else if (notation.match(notationRegex) && notation.length > 1 && !isFuzzy) {\n\t\t\t\treturn this.move(parseNotation(notation), true);\n\t\t\t} else if (isFuzzy) {\n\t\t\t\tthrow new Error(`Invalid move (${notation})`);\n\t\t\t}\n\n\t\t\tif (move) {\n\t\t\t\t// apply pawn promotion\n\t\t\t\tif (promo) {\n\t\t\t\t\tswitch (promo) {\n\t\t\t\t\t\tcase 'B':\n\t\t\t\t\t\t\tp = Piece.createBishop(side);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'N':\n\t\t\t\t\t\t\tp = Piece.createKnight(side);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'Q':\n\t\t\t\t\t\t\tp = Piece.createQueen(side);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'R':\n\t\t\t\t\t\t\tp = Piece.createRook(side);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tp = Piece.createPawn(side);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (p) {\n\t\t\t\t\t\tthis.game.board.promote(move.move.postSquare, p);\n\t\t\t\t\t\t/*\n\t\t\t\t\t\tp.moveCount = move.move.postSquare.piece.moveCount;\n\t\t\t\t\t\tmove.move.postSquare.piece = p;\n\t\t\t\t\t\t//*/\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tupdateGameClient(this);\n\n\t\t\t\treturn move;\n\t\t\t}\n\t\t}\n\n\t\tthrow new Error(`Notation is invalid (${notation})`);\n\t}\n}\n\nexport default { AlgebraicGameClient };\n"],"file":"algebraicGameClient.js"}