"use strict";

var _Reflect$construct = require("@babel/runtime-corejs3/core-js-stable/reflect/construct");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports["default"] = exports.RookValidation = exports.QueenValidation = exports.PieceValidation = exports.PawnValidation = exports.KnightValidation = exports.KingValidation = exports.BishopValidation = void 0;

var _promise = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/promise"));

var _repeat = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/repeat"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/getPrototypeOf"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/createClass"));

var _piece = require("./piece");

var _board = require("./board");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var PieceValidation = /*#__PURE__*/function () {
  function PieceValidation(board) {
    (0, _classCallCheck2["default"])(this, PieceValidation);
    this.allowBackward = false;
    this.allowDiagonal = false;
    this.allowForward = false;
    this.allowHorizontal = false;
    this.board = board;
    this.type = null;
    this.repeat = 0;
  }

  (0, _createClass2["default"])(PieceValidation, [{
    key: "applySpecialValidation",
    value: function applySpecialValidation() {// do nothing...
      // overridden in the concrete validation classes
      // where special logic is required
    }
  }, {
    key: "start",
    value: function start(src, callback) {
      // ensure callback is set
      callback = callback || function (err, destinationSquares) {
        return new _promise["default"](function (resolve, reject) {
          if (err) {
            return reject(err);
          }

          return resolve(destinationSquares);
        });
      };

      var opt = {
        destSquares: [],
        origin: src,
        piece: src ? src.piece : null
      };

      var findMoveOptions = function findMoveOptions(b, r, n) {
        var block = false,
            capture = false,
            currentSquare = b.getNeighborSquare(opt.origin, n),
            i = 0;

        while (currentSquare && i < r) {
          block = currentSquare.piece !== null && (opt.piece.type === _piece.PieceType.Pawn || currentSquare.piece.side === opt.piece.side);
          capture = currentSquare.piece && !block;

          if (!block) {
            opt.destSquares.push(currentSquare);
          }

          if (capture || block) {
            currentSquare = null;
          } else {
            currentSquare = b.getNeighborSquare(currentSquare, n);
            i++;
          }
        }
      };

      if (!opt.piece || opt.piece.type !== this.type) {
        return callback(new Error('piece is invalid'));
      }

      if (this.board && opt.origin) {
        // forward squares
        if (this.allowForward) {
          findMoveOptions(this.board, (0, _repeat["default"])(this), opt.piece.side === _piece.SideType.White ? _board.NeighborType.Above : _board.NeighborType.Below);
        } // backward squares


        if (this.allowBackward) {
          findMoveOptions(this.board, (0, _repeat["default"])(this), opt.piece.side === _piece.SideType.White ? _board.NeighborType.Below : _board.NeighborType.Above);
        } // horizontal squares


        if (this.allowHorizontal) {
          findMoveOptions(this.board, (0, _repeat["default"])(this), _board.NeighborType.Left);
          findMoveOptions(this.board, (0, _repeat["default"])(this), _board.NeighborType.Right);
        } // diagonal squares


        if (this.allowDiagonal) {
          findMoveOptions(this.board, (0, _repeat["default"])(this), _board.NeighborType.AboveLeft);
          findMoveOptions(this.board, (0, _repeat["default"])(this), _board.NeighborType.BelowRight);
          findMoveOptions(this.board, (0, _repeat["default"])(this), _board.NeighborType.BelowLeft);
          findMoveOptions(this.board, (0, _repeat["default"])(this), _board.NeighborType.AboveRight);
        } // apply additional validation logic


        this.applySpecialValidation(opt); // callback

        return callback(null, opt.destSquares);
      }

      return callback(new Error('board is invalid'));
    }
  }], [{
    key: "create",
    value: function create(piece, board) {
      switch (piece) {
        case _piece.PieceType.Bishop:
          return new BishopValidation(board);

        case _piece.PieceType.King:
          return new KingValidation(board);

        case _piece.PieceType.Knight:
          return new KnightValidation(board);

        case _piece.PieceType.Pawn:
          return new PawnValidation(board);

        case _piece.PieceType.Queen:
          return new QueenValidation(board);

        case _piece.PieceType.Rook:
          return new RookValidation(board);

        default:
          return null;
      }
    }
  }]);
  return PieceValidation;
}();

exports.PieceValidation = PieceValidation;

var BishopValidation = /*#__PURE__*/function (_PieceValidation) {
  (0, _inherits2["default"])(BishopValidation, _PieceValidation);

  var _super = _createSuper(BishopValidation);

  function BishopValidation(board) {
    var _this;

    (0, _classCallCheck2["default"])(this, BishopValidation);
    _this = _super.call(this, board); // base validation properties

    _this.allowDiagonal = true;
    _this.type = _piece.PieceType.Bishop;
    _this.repeat = 8;
    return _this;
  }

  return (0, _createClass2["default"])(BishopValidation);
}(PieceValidation);

exports.BishopValidation = BishopValidation;

var KingValidation = /*#__PURE__*/function (_PieceValidation2) {
  (0, _inherits2["default"])(KingValidation, _PieceValidation2);

  var _super2 = _createSuper(KingValidation);

  function KingValidation(board) {
    var _this2;

    (0, _classCallCheck2["default"])(this, KingValidation);
    _this2 = _super2.call(this, board); // base validation properties

    _this2.allowBackward = true;
    _this2.allowDiagonal = true;
    _this2.allowForward = true;
    _this2.allowHorizontal = true;
    _this2.type = _piece.PieceType.King;
    _this2.repeat = 1;
    return _this2;
  }

  (0, _createClass2["default"])(KingValidation, [{
    key: "applySpecialValidation",
    value: function applySpecialValidation() {// check for castle?
    }
  }]);
  return KingValidation;
}(PieceValidation);

exports.KingValidation = KingValidation;

var KnightValidation = /*#__PURE__*/function (_PieceValidation3) {
  (0, _inherits2["default"])(KnightValidation, _PieceValidation3);

  var _super3 = _createSuper(KnightValidation);

  function KnightValidation(board) {
    var _this3;

    (0, _classCallCheck2["default"])(this, KnightValidation);
    _this3 = _super3.call(this, board); // base validation properties

    _this3.type = _piece.PieceType.Knight;
    _this3.repeat = 1;
    return _this3;
  }

  (0, _createClass2["default"])(KnightValidation, [{
    key: "applySpecialValidation",
    value: function applySpecialValidation(opt) {
      // add knight move options
      var aboveLeft = this.board.getNeighborSquare(opt.origin, _board.NeighborType.AboveLeft),
          aboveRight = this.board.getNeighborSquare(opt.origin, _board.NeighborType.AboveRight),
          belowLeft = this.board.getNeighborSquare(opt.origin, _board.NeighborType.BelowLeft),
          belowRight = this.board.getNeighborSquare(opt.origin, _board.NeighborType.BelowRight),
          i = 0,
          p = null,
          squares = [];

      if (aboveLeft) {
        squares.push(this.board.getNeighborSquare(aboveLeft, _board.NeighborType.Above));
        squares.push(this.board.getNeighborSquare(aboveLeft, _board.NeighborType.Left));
      }

      if (aboveRight) {
        squares.push(this.board.getNeighborSquare(aboveRight, _board.NeighborType.Above));
        squares.push(this.board.getNeighborSquare(aboveRight, _board.NeighborType.Right));
      }

      if (belowLeft) {
        squares.push(this.board.getNeighborSquare(belowLeft, _board.NeighborType.Below));
        squares.push(this.board.getNeighborSquare(belowLeft, _board.NeighborType.Left));
      }

      if (belowRight) {
        squares.push(this.board.getNeighborSquare(belowRight, _board.NeighborType.Below));
        squares.push(this.board.getNeighborSquare(belowRight, _board.NeighborType.Right));
      }

      for (i = 0; i < squares.length; i++) {
        if (squares[i]) {
          // check for enemy piece on square
          p = squares[i] ? squares[i].piece : null;

          if (!p || p.side !== opt.piece.side) {
            opt.destSquares.push(squares[i]);
          }
        }
      }
    }
  }]);
  return KnightValidation;
}(PieceValidation);

exports.KnightValidation = KnightValidation;

var PawnValidation = /*#__PURE__*/function (_PieceValidation4) {
  (0, _inherits2["default"])(PawnValidation, _PieceValidation4);

  var _super4 = _createSuper(PawnValidation);

  function PawnValidation(board) {
    var _this4;

    (0, _classCallCheck2["default"])(this, PawnValidation);
    _this4 = _super4.call(this, board); // base validation properties

    _this4.allowForward = true;
    _this4.type = _piece.PieceType.Pawn;
    _this4.repeat = 1;
    return _this4;
  }
  /* eslint no-magic-numbers:0 */


  (0, _createClass2["default"])(PawnValidation, [{
    key: "applySpecialValidation",
    value: function applySpecialValidation(opt) {
      // check for capture
      var i = 0,
          p = null,
          sq = null,
          squares = [this.board.getNeighborSquare(opt.origin, opt.piece.side === _piece.SideType.White ? _board.NeighborType.AboveLeft : _board.NeighborType.BelowLeft), this.board.getNeighborSquare(opt.origin, opt.piece.side === _piece.SideType.White ? _board.NeighborType.AboveRight : _board.NeighborType.BelowRight)]; // check for capture

      for (i = 0; i < squares.length; i++) {
        // check for enemy piece on square
        p = squares[i] ? squares[i].piece : null;

        if (p && p.side !== opt.piece.side) {
          opt.destSquares.push(squares[i]);
        }
      } // check for double square first move


      if (opt.piece.moveCount === 0 && opt.destSquares.length && // Fix for issue #15 (originally looked for length of 1)
      opt.destSquares[0].piece === null) {
        // Fix for issue #1
        sq = this.board.getNeighborSquare(opt.destSquares[0], opt.piece.side === _piece.SideType.White ? _board.NeighborType.Above : _board.NeighborType.Below);

        if (!sq.piece) {
          opt.destSquares.push(sq);
        } // check for en passant

      } else if (opt.origin.rank === (opt.piece.side === _piece.SideType.White ? 5 : 4)) {
        // get squares left & right of pawn
        squares = [this.board.getNeighborSquare(opt.origin, _board.NeighborType.Left), this.board.getNeighborSquare(opt.origin, _board.NeighborType.Right)];
        i = 0;

        for (i = 0; i < squares.length; i++) {
          // check for pawn on square
          p = squares[i] ? squares[i].piece : null;

          if (p && p.type === _piece.PieceType.Pawn && p.side !== opt.piece.side && p.moveCount === 1 && this.board.lastMovedPiece === p) {
            opt.destSquares.push(this.board.getNeighborSquare(squares[i], p.side === _piece.SideType.Black ? _board.NeighborType.Above : _board.NeighborType.Below));
          }
        }
      }
    }
  }]);
  return PawnValidation;
}(PieceValidation);

exports.PawnValidation = PawnValidation;

var QueenValidation = /*#__PURE__*/function (_PieceValidation5) {
  (0, _inherits2["default"])(QueenValidation, _PieceValidation5);

  var _super5 = _createSuper(QueenValidation);

  function QueenValidation(board) {
    var _this5;

    (0, _classCallCheck2["default"])(this, QueenValidation);
    _this5 = _super5.call(this, board); // base validation properties

    _this5.allowBackward = true;
    _this5.allowDiagonal = true;
    _this5.allowForward = true;
    _this5.allowHorizontal = true;
    _this5.repeat = 8;
    _this5.type = _piece.PieceType.Queen;
    return _this5;
  }

  return (0, _createClass2["default"])(QueenValidation);
}(PieceValidation);

exports.QueenValidation = QueenValidation;

var RookValidation = /*#__PURE__*/function (_PieceValidation6) {
  (0, _inherits2["default"])(RookValidation, _PieceValidation6);

  var _super6 = _createSuper(RookValidation);

  function RookValidation(board) {
    var _this6;

    (0, _classCallCheck2["default"])(this, RookValidation);
    _this6 = _super6.call(this, board); // base validation properties

    _this6.allowBackward = true;
    _this6.allowForward = true;
    _this6.allowHorizontal = true;
    _this6.repeat = 8;
    _this6.type = _piece.PieceType.Rook;
    return _this6;
  }

  return (0, _createClass2["default"])(RookValidation);
}(PieceValidation);

exports.RookValidation = RookValidation;
var _default = {
  PieceValidation: PieceValidation
};
exports["default"] = _default;
//# sourceMappingURL=pieceValidation.js.map
