"use strict";

var _Reflect$construct = require("@babel/runtime-corejs3/core-js-stable/reflect/construct");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports["default"] = exports.NeighborType = exports.Board = void 0;

var _reverse = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/reverse"));

var _flatMap = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/flat-map"));

var _reduce = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/reduce"));

var _parseInt2 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/parse-int"));

var _indexOf = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/index-of"));

var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/map"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/toConsumableArray"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/slicedToArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/getPrototypeOf"));

var _piece = require("./piece");

var _events = require("events");

var _square = require("./square");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

// types
var NeighborType = {
  Above: {
    offset: 8
  },
  AboveLeft: {
    offset: 7
  },
  AboveRight: {
    offset: 9
  },
  Below: {
    offset: -8
  },
  BelowLeft: {
    offset: -9
  },
  BelowRight: {
    offset: -7
  },
  KnightAboveLeft: {
    offset: 15
  },
  KnightAboveRight: {
    offset: 17
  },
  KnightBelowLeft: {
    offset: -17
  },
  KnightBelowRight: {
    offset: -15
  },
  KnightLeftAbove: {
    offset: 6
  },
  KnightLeftBelow: {
    offset: -10
  },
  KnightRightAbove: {
    offset: 10
  },
  KnightRightBelow: {
    offset: -6
  },
  Left: {
    offset: -1
  },
  Right: {
    offset: 1
  }
}; // ctor

exports.NeighborType = NeighborType;

var Board = /*#__PURE__*/function (_EventEmitter) {
  (0, _inherits2["default"])(Board, _EventEmitter);

  var _super = _createSuper(Board);

  function Board(squares) {
    var _this;

    (0, _classCallCheck2["default"])(this, Board);
    _this = _super.call(this);
    _this.squares = squares;
    return _this;
  }

  (0, _createClass2["default"])(Board, [{
    key: "getFen",
    value: function getFen() {
      var _context, _context2, _context3;

      var fen = [];
      var squares = (0, _reverse["default"])(_context = (0, _flatMap["default"])(_context2 = (0, _reduce["default"])(_context3 = this.squares).call(_context3, function (acc, cur, idx) {
        var outerIdx = (0, _parseInt2["default"])(idx / 8, 10);
        acc[outerIdx] = acc[outerIdx] || [];
        acc[outerIdx].push(cur);
        return acc;
      }, [])).call(_context2, function (row) {
        return (0, _reverse["default"])(row).call(row);
      })).call(_context);

      for (var i = 0; i < squares.length; i += 1) {
        var square = squares[i];

        if (square.file === 'a' && square.rank < 8) {
          fen.push('/');
        }

        if (square.piece) {
          var transform = "to".concat(square.piece.side.name === 'white' ? 'Upp' : 'Low', "erCase");
          fen.push((square.piece.notation || 'p')[transform]());
        } else {
          if (isNaN(Number(fen[fen.length - 1]))) {
            fen.push(1);
          } else {
            fen[fen.length - 1] += 1;
          }
        }
      }

      return fen.join('');
    }
  }, {
    key: "getNeighborSquare",
    value: function getNeighborSquare(sq, n) {
      if (sq && n) {
        var _context4;

        // validate boundaries of board
        if (sq.file === 'a' && (n === NeighborType.AboveLeft || n === NeighborType.BelowLeft || n === NeighborType.Left)) {
          return null;
        }

        if (sq.file === 'h' && (n === NeighborType.AboveRight || n === NeighborType.BelowRight || n === NeighborType.Right)) {
          return null;
        }

        if (sq.rank === 1 && (n === NeighborType.Below || n === NeighborType.BelowLeft || n === NeighborType.BelowRight)) {
          return null;
        }

        if (sq.rank === 8 && (n === NeighborType.Above || n === NeighborType.AboveLeft || n === NeighborType.AboveRight)) {
          return null;
        } // validate file


        var fIndex = (0, _indexOf["default"])(_context4 = 'abcdefgh').call(_context4, sq.file),
            i = 0;

        if (fIndex !== -1 && sq.rank > 0 && sq.rank < 9) {
          // find the index
          i = 8 * (sq.rank - 1) + fIndex + n.offset;

          if (this.squares && this.squares.length > i && i > -1) {
            return this.squares[i];
          }
        }
      }

      return null;
    }
  }, {
    key: "getSquare",
    value: function getSquare(f, r) {
      var _context5;

      // check for shorthand
      if (typeof f === 'string' && f.length === 2 && !r) {
        r = (0, _parseInt2["default"])(f.charAt(1), 10);
        f = f.charAt(0);
      } // validate file


      var fIndex = (0, _indexOf["default"])(_context5 = 'abcdefgh').call(_context5, f),
          i = 0;

      if (fIndex !== -1 && r > 0 && r < 9) {
        // Find the index
        i = 8 * (r - 1) + fIndex;

        if (this.squares && this.squares.length > i) {
          return this.squares[i];
        }
      }

      return null;
    }
  }, {
    key: "getSquares",
    value: function getSquares(side) {
      var list = [];

      for (var i = 0; i < this.squares.length; i++) {
        if (this.squares[i].piece && this.squares[i].piece.side === side) {
          list.push(this.squares[i]);
        }
      }

      return list;
    }
  }, {
    key: "move",
    value: function move(src, dest, n) {
      if (typeof src === 'string' && src.length === 2) {
        src = this.getSquare(src);
      }

      if (typeof dest === 'string' && dest.length === 2) {
        dest = this.getSquare(dest);
      }

      var simulate;

      if (typeof n === 'boolean') {
        simulate = n;
        n = null;
      }

      if (src && src.file && src.rank && dest && dest.file && dest.rank) {
        var move = {
          algebraic: n,
          capturedPiece: dest.piece,
          castle: false,
          enPassant: false,
          postSquare: dest,
          prevSquare: src
        },
            p = src.piece,
            sq = null,
            undo = function undo(b, m) {
          return function () {
            if (!simulate) {
              // ensure no harm can be done if called multiple times
              if (m.undone) {
                throw new Error('cannot undo a move multiple times');
              }
            } // backout move by returning the squares to their state prior to the move


            m.prevSquare.piece = m.postSquare.piece;
            m.postSquare.piece = m.capturedPiece; // handle standard scenario

            if (!m.enPassant) {
              m.postSquare.piece = m.capturedPiece;
            } // handle en-passant scenario


            if (m.enPassant) {
              b.getSquare(m.postSquare.file, m.prevSquare.rank).piece = m.capturedPiece; // there is no piece on the post square in the event of
              // an en-passant, clear anything that me be present as
              // a result of the move (fix for issue #8)

              m.postSquare.piece = null;
            } // handle castle scenario


            if (m.castle) {
              sq = b.getSquare(move.postSquare.file === 'g' ? 'f' : 'd', move.postSquare.rank);
              b.getSquare(move.postSquare.file === 'g' ? 'h' : 'a', move.postSquare.rank).piece = sq.piece;
              sq.piece = null;
            } // if not a simulation, reset the move count


            if (!simulate) {
              // correct the moveCount for the piece
              m.prevSquare.piece.moveCount = m.prevSquare.piece.moveCount - 1; // indicate move has been undone

              m.undone = true; // emit an undo event

              b.emit('undo', m);
            }
          };
        };

        dest.piece = p;
        move.castle = p.type === _piece.PieceType.King && p.moveCount === 0 && (move.postSquare.file === 'g' || move.postSquare.file === 'c');
        move.enPassant = p.type === _piece.PieceType.Pawn && move.capturedPiece === null && move.postSquare.file !== move.prevSquare.file;
        move.prevSquare.piece = null; // check for en-passant

        if (move.enPassant) {
          sq = this.getSquare(move.postSquare.file, move.prevSquare.rank);
          move.capturedPiece = sq.piece;
          sq.piece = null;
        } // check for castle


        if (move.castle) {
          sq = this.getSquare(move.postSquare.file === 'g' ? 'h' : 'a', move.postSquare.rank);

          if (sq.piece === null) {
            move.castle = false;
          } else {
            this.getSquare(move.postSquare.file === 'g' ? 'f' : 'd', move.postSquare.rank).piece = sq.piece;
            sq.piece = null;
          }
        }

        if (!simulate) {
          p.moveCount++;
          this.lastMovedPiece = p;

          if (move.capturedPiece) {
            this.emit('capture', move);
          }

          if (move.castle) {
            this.emit('castle', move);
          }

          if (move.enPassant) {
            this.emit('enPassant', move);
          }

          this.emit('move', move);
        }

        return {
          move: move,
          undo: undo(this, move)
        };
      }
    }
  }, {
    key: "promote",
    value: function promote(sq, p) {
      // update move count and last piece
      p.moveCount = sq.piece.moveCount;
      this.lastMovedPiece = p; // set to square

      sq.piece = p;
      this.emit('promote', sq);
      return sq;
    }
  }], [{
    key: "create",
    value: function create() {
      var b = new Board([]),
          f = 0,
          i = 0,
          r = 0,
          sq = null;
      /* eslint no-magic-numbers:0 */

      for (i = 0; i < 64; i++) {
        f = Math.floor(i % 8);
        r = Math.floor(i / 8) + 1;
        sq = _square.Square.create('abcdefgh'[f], r);
        b.squares.push(sq);

        if (r === 1 || r === 8) {
          // Named pieces
          if (f === 0 || f === 7) {
            // Rookage
            sq.piece = _piece.Piece.createRook(r === 1 ? _piece.SideType.White : _piece.SideType.Black);
          } else if (f === 1 || f === 6) {
            // Knights
            sq.piece = _piece.Piece.createKnight(r === 1 ? _piece.SideType.White : _piece.SideType.Black);
          } else if (f === 2 || f === 5) {
            // Bish's
            sq.piece = _piece.Piece.createBishop(r === 1 ? _piece.SideType.White : _piece.SideType.Black);
          } else if (f === 3) {
            sq.piece = _piece.Piece.createQueen(r === 1 ? _piece.SideType.White : _piece.SideType.Black);
          } else {
            sq.piece = _piece.Piece.createKing(r === 1 ? _piece.SideType.White : _piece.SideType.Black);
          }
        } else if (r === 2 || r === 7) {
          // Pawns
          sq.piece = _piece.Piece.createPawn(r === 2 ? _piece.SideType.White : _piece.SideType.Black);
        }
      }

      return b;
    }
  }, {
    key: "load",
    value: function load(fen) {
      var _context6;

      var pieces = {
        b: {
          arg: _piece.SideType.Black,
          method: 'createBishop'
        },
        B: {
          arg: _piece.SideType.White,
          method: 'createBishop'
        },
        k: {
          arg: _piece.SideType.Black,
          method: 'createKing'
        },
        K: {
          arg: _piece.SideType.White,
          method: 'createKing'
        },
        n: {
          arg: _piece.SideType.Black,
          method: 'createKnight'
        },
        N: {
          arg: _piece.SideType.White,
          method: 'createKnight'
        },
        p: {
          arg: _piece.SideType.Black,
          method: 'createPawn'
        },
        P: {
          arg: _piece.SideType.White,
          method: 'createPawn'
        },
        q: {
          arg: _piece.SideType.Black,
          method: 'createQueen'
        },
        Q: {
          arg: _piece.SideType.White,
          method: 'createQueen'
        },
        r: {
          arg: _piece.SideType.Black,
          method: 'createRook'
        },
        R: {
          arg: _piece.SideType.White,
          method: 'createRook'
        }
      };

      var _fen$split = fen.split(' '),
          _fen$split2 = (0, _slicedToArray2["default"])(_fen$split, 1),
          board
      /* , turn, castling, enPassant, halfs, moves */
      = _fen$split2[0];

      var lines = (0, _map["default"])(_context6 = board.split('/')).call(_context6, function (line, rank) {
        var arr = line.split('');
        var file = 0;
        return (0, _reduce["default"])(arr).call(arr, function (acc, cur) {
          if (!isNaN(Number(cur))) {
            for (var i = 0; i < Number(cur); i += 1) {
              acc.push(_square.Square.create('abcdefgh'[file], 8 - rank));
              file = file < 7 ? file + 1 : 0;
            }
          } else {
            var square = _square.Square.create('abcdefgh'[file], 8 - rank);

            square.piece = _piece.Piece[pieces[cur].method](pieces[cur].arg);
            acc.push(square);
            file = file < 7 ? file + 1 : 0;
          }

          return acc;
        }, []);
      });
      return new Board((0, _reduce["default"])(lines).call(lines, function (acc, cur) {
        acc.push.apply(acc, (0, _toConsumableArray2["default"])(cur));
        return acc;
      }, []));
    }
  }]);
  return Board;
}(_events.EventEmitter); // exports


exports.Board = Board;
var _default = {
  Board: Board,
  NeighborType: NeighborType
};
exports["default"] = _default;
//# sourceMappingURL=board.js.map
