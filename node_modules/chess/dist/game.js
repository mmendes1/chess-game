"use strict";

var _Reflect$construct = require("@babel/runtime-corejs3/core-js-stable/reflect/construct");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports["default"] = exports.Move = exports.Game = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/getPrototypeOf"));

var _board = require("./board");

var _crypto = _interopRequireDefault(require("crypto"));

var _events = require("events");

var _piece = require("./piece");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function addToHistory(game) {
  return function (ev) {
    var hashCode = game.getHashCode(),
        move = new Move(ev.prevSquare, ev.postSquare, ev.capturedPiece, ev.algebraic, ev.castle, ev.enPassant, hashCode);
    game.moveHistory.push(move);
  };
}

function denotePromotionInHistory(game) {
  return function () {
    var latest = game.moveHistory[game.moveHistory.length - 1];

    if (latest) {
      latest.promotion = true;
    }
  };
}

function removeFromHistory(game) {
  return function () {
    game.moveHistory.pop(); // find the previous move piece

    var m = game.moveHistory[game.moveHistory.length - 1]; // update last moved piece

    game.board.lastMovedPiece = m.piece;
  };
}

var Game = /*#__PURE__*/function (_EventEmitter) {
  (0, _inherits2["default"])(Game, _EventEmitter);

  var _super = _createSuper(Game);

  function Game(board) {
    var _this;

    (0, _classCallCheck2["default"])(this, Game);
    _this = _super.call(this);
    _this.board = board;
    _this.moveHistory = [];
    return _this;
  }

  (0, _createClass2["default"])(Game, [{
    key: "getCurrentSide",
    value: function getCurrentSide() {
      return this.moveHistory.length % 2 === 0 ? _piece.SideType.White : _piece.SideType.Black;
    }
  }, {
    key: "getHashCode",
    value: function getHashCode() {
      var i = 0,
          sum = _crypto["default"].createHash('md5');

      for (i = 0; i < this.board.squares.length; i++) {
        if (this.board.squares[i].piece !== null) {
          sum.update(this.board.squares[i].file + this.board.squares[i].rank + (this.board.squares[i].piece.side === _piece.SideType.White ? 'w' : 'b') + this.board.squares[i].piece.notation + (i < this.board.squares.length - 1 ? '-' : ''));
        }
      } // generate hash code for board


      return sum.digest('base64');
    }
  }], [{
    key: "create",
    value: function create() {
      var board = _board.Board.create(),
          game = new Game(board); // handle move and promotion events correctly


      board.on('move', addToHistory(game));
      board.on('promote', denotePromotionInHistory(game));
      board.on('undo', removeFromHistory(game));
      return game;
    }
  }, {
    key: "load",
    value: function load(moveHistory) {
      var board = _board.Board.create(),
          game = new Game(board),
          i = 0; // handle move and promotion events correctly


      board.on('move', addToHistory(game));
      board.on('promote', denotePromotionInHistory(game)); // apply move history

      for (i = 0; i < moveHistory.length; i++) {
        board.move(board.getSquare(moveHistory[i].prevFile, moveHistory[i].prevRank), board.getSquare(moveHistory[i].postFile, moveHistory[i].postRank));
      }

      return game;
    }
  }]);
  return Game;
}(_events.EventEmitter);

exports.Game = Game;
var Move = /*#__PURE__*/(0, _createClass2["default"])(function Move(originSquare, targetSquare, capturedPiece, notation, castle, enPassant, hash) {
  (0, _classCallCheck2["default"])(this, Move);
  this.algebraic = notation;
  this.capturedPiece = capturedPiece;
  this.castle = castle;
  this.enPassant = enPassant;
  this.hashCode = hash;
  this.piece = targetSquare.piece;
  this.promotion = false;
  this.postFile = targetSquare.file;
  this.postRank = targetSquare.rank;
  this.prevFile = originSquare.file;
  this.prevRank = originSquare.rank;
});
exports.Move = Move;
var _default = {
  Game: Game,
  Move: Move
};
exports["default"] = _default;
//# sourceMappingURL=game.js.map
