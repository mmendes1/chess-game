"use strict";

var _Reflect$construct = require("@babel/runtime-corejs3/core-js-stable/reflect/construct");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports["default"] = exports.SimpleGameClient = void 0;

var _forEach = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/for-each"));

var _concat = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/concat"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/getPrototypeOf"));

var _events = require("events");

var _game = require("./game");

var _gameValidation = require("./gameValidation");

var _piece = require("./piece");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

// private methods
function isMoveValid(src, dest, validMoves) {
  var i = 0,
      isFound = function isFound(expr, sq) {
    return typeof expr === 'string' && sq.file + sq.rank === expr || expr.rank && expr.file && sq.file === expr.file && sq.rank === expr.rank;
  },
      squares = [];

  for (i = 0; i < validMoves.length; i++) {
    if (isFound(src, validMoves[i].src)) {
      squares = validMoves[i].squares;
    }
  }

  if (squares && squares.length > 0) {
    for (i = 0; i < squares.length; i++) {
      if (isFound(dest, squares[i])) {
        return true;
      }
    }
  }

  return false;
}

function updateGameClient(gameClient) {
  return gameClient.validation.start(function (err, result) {
    if (err) {
      throw new Error(err);
    }

    gameClient.isCheck = result.isCheck;
    gameClient.isCheckmate = result.isCheckmate;
    gameClient.isRepetition = result.isRepetition;
    gameClient.isStalemate = result.isStalemate;
    gameClient.validMoves = result.validMoves;
  });
} // ctor


var SimpleGameClient = /*#__PURE__*/function (_EventEmitter) {
  (0, _inherits2["default"])(SimpleGameClient, _EventEmitter);

  var _super = _createSuper(SimpleGameClient);

  function SimpleGameClient(game) {
    var _context, _context2;

    var _this;

    (0, _classCallCheck2["default"])(this, SimpleGameClient);
    _this = _super.call(this);
    _this.isCheck = false;
    _this.isCheckmate = false;
    _this.isRepetition = false;
    _this.isStalemate = false;
    _this.game = game;
    _this.validMoves = [];
    _this.validation = _gameValidation.GameValidation.create(_this.game); // bubble the game and board events

    (0, _forEach["default"])(_context = ['check', 'checkmate']).call(_context, function (ev) {
      _this.game.on(ev, function (data) {
        return _this.emit(ev, data);
      });
    });
    (0, _forEach["default"])(_context2 = ['capture', 'castle', 'enPassant', 'move', 'promote']).call(_context2, function (ev) {
      _this.game.board.on(ev, function (data) {
        return _this.emit(ev, data);
      });
    });
    return _this;
  }

  (0, _createClass2["default"])(SimpleGameClient, [{
    key: "getStatus",
    value: function getStatus(forceUpdate) {
      if (forceUpdate) {
        updateGameClient(this);
      }

      return {
        board: this.game.board,
        isCheck: this.isCheck,
        isCheckmate: this.isCheckmate,
        isRepetition: this.isRepetition,
        isStalemate: this.isStalemate,
        validMoves: this.validMoves
      };
    }
  }, {
    key: "move",
    value: function move(src, dest, promo) {
      var _context3;

      var move = null,
          side = this.game.getCurrentSide();

      if (src && dest && isMoveValid(src, dest, this.validMoves)) {
        move = this.game.board.move(src, dest);

        if (move) {
          // apply pawn promotion if applicable
          if (promo) {
            var piece;

            switch (promo) {
              case 'B':
                piece = _piece.Piece.createBishop(side);
                break;

              case 'N':
                piece = _piece.Piece.createKnight(side);
                break;

              case 'Q':
                piece = _piece.Piece.createQueen(side);
                break;

              case 'R':
                piece = _piece.Piece.createRook(side);
                break;

              default:
                piece = null;
                break;
            }

            if (piece) {
              this.game.board.promote(move.move.postSquare, piece);
              /*
              p.moveCount = move.move.postSquare.piece.moveCount;
              move.move.postSquare.piece = p;
              //*/
            }
          }

          updateGameClient(this);
          return move;
        }
      }

      throw new Error((0, _concat["default"])(_context3 = "Move is invalid (".concat(src, " to ")).call(_context3, dest, ")"));
    }
  }], [{
    key: "create",
    value: function create() {
      var game = _game.Game.create(),
          gameClient = new SimpleGameClient(game);

      updateGameClient(gameClient);
      return gameClient;
    }
  }]);
  return SimpleGameClient;
}(_events.EventEmitter);

exports.SimpleGameClient = SimpleGameClient;
var _default = {
  SimpleGameClient: SimpleGameClient
};
exports["default"] = _default;
//# sourceMappingURL=simpleGameClient.js.map
