{"version":3,"sources":["game.js"],"names":["addToHistory","game","ev","hashCode","getHashCode","move","Move","prevSquare","postSquare","capturedPiece","algebraic","castle","enPassant","moveHistory","push","denotePromotionInHistory","latest","length","promotion","removeFromHistory","pop","m","board","lastMovedPiece","piece","Game","SideType","White","Black","i","sum","crypto","createHash","squares","update","file","rank","side","notation","digest","Board","create","on","getSquare","prevFile","prevRank","postFile","postRank","EventEmitter","originSquare","targetSquare","hash"],"mappings":"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","sourcesContent":["/**\n\tGames contain the history of a board and the board itself.\n\n\tAt time of writing this, the game is also intended to store some\n\tdegree of information regarding the opponents and keys that\n\tcould be used for storage, etc.\n*/\nimport { Board } from './board';\nimport crypto from 'crypto';\nimport { EventEmitter } from 'events';\nimport { SideType } from './piece';\n\nfunction addToHistory (game) {\n\treturn (ev) => {\n\t\tlet\n\t\t\thashCode = game.getHashCode(),\n\t\t\tmove = new Move(\n\t\t\t\tev.prevSquare,\n\t\t\t\tev.postSquare,\n\t\t\t\tev.capturedPiece,\n\t\t\t\tev.algebraic,\n\t\t\t\tev.castle,\n\t\t\t\tev.enPassant,\n\t\t\t\thashCode);\n\n\t\tgame.moveHistory.push(move);\n\t};\n}\n\nfunction denotePromotionInHistory (game) {\n\treturn () => {\n\t\tlet\n\t\t\tlatest = game.moveHistory[\n\t\t\tgame.moveHistory.length - 1];\n\n\t\tif (latest) {\n\t\t\tlatest.promotion = true;\n\t\t}\n\t};\n}\n\nfunction removeFromHistory (game) {\n\treturn () => {\n\t\tgame.moveHistory.pop();\n\n\t\t// find the previous move piece\n\t\tlet m = game.moveHistory[game.moveHistory.length - 1];\n\n\t\t// update last moved piece\n\t\tgame.board.lastMovedPiece = m.piece;\n\t};\n}\n\nexport class Game extends EventEmitter {\n\tconstructor (board) {\n\t\tsuper();\n\n\t\tthis.board = board;\n\t\tthis.moveHistory = [];\n\t}\n\n\tstatic create () {\n\t\tlet\n\t\t\tboard = Board.create(),\n\t\t\tgame = new Game(board);\n\n\t\t// handle move and promotion events correctly\n\t\tboard.on('move', addToHistory(game));\n\t\tboard.on('promote', denotePromotionInHistory(game));\n\t\tboard.on('undo', removeFromHistory(game));\n\n\t\treturn game;\n\t}\n\n\tgetCurrentSide () {\n\t\treturn this.moveHistory.length % 2 === 0 ?\n\t\t\tSideType.White :\n\t\t\tSideType.Black;\n\t}\n\n\tgetHashCode () {\n\t\tlet\n\t\t\ti = 0,\n\t\t\tsum = crypto.createHash('md5');\n\n\t\tfor (i = 0; i < this.board.squares.length; i++) {\n\t\t\tif (this.board.squares[i].piece !== null) {\n\t\t\t\tsum.update(this.board.squares[i].file +\n\t\t\t\t\tthis.board.squares[i].rank +\n\t\t\t\t\t(this.board.squares[i].piece.side === SideType.White ? 'w' : 'b') +\n\t\t\t\t\tthis.board.squares[i].piece.notation +\n\t\t\t\t\t(i < (this.board.squares.length - 1) ? '-' : ''));\n\t\t\t}\n\t\t}\n\n\t\t// generate hash code for board\n\t\treturn sum.digest('base64');\n\t}\n\n\tstatic load (moveHistory) {\n\t\tlet\n\t\t\tboard = Board.create(),\n\t\t\tgame = new Game(board),\n\t\t\ti = 0;\n\n\t\t// handle move and promotion events correctly\n\t\tboard.on('move', addToHistory(game));\n\t\tboard.on('promote', denotePromotionInHistory(game));\n\n\t\t// apply move history\n\t\tfor (i = 0; i < moveHistory.length; i++) {\n\t\t\tboard.move(\n\t\t\t\tboard.getSquare(\n\t\t\t\t\tmoveHistory[i].prevFile,\n\t\t\t\t\tmoveHistory[i].prevRank),\n\t\t\t\tboard.getSquare(\n\t\t\t\t\tmoveHistory[i].postFile,\n\t\t\t\t\tmoveHistory[i].postRank));\n\t\t}\n\n\t\treturn game;\n\t}\n}\n\nexport class Move {\n\tconstructor (originSquare, targetSquare, capturedPiece, notation, castle, enPassant, hash) {\n\t\tthis.algebraic = notation;\n\t\tthis.capturedPiece = capturedPiece;\n\t\tthis.castle = castle;\n\t\tthis.enPassant = enPassant;\n\t\tthis.hashCode = hash;\n\t\tthis.piece = targetSquare.piece;\n\t\tthis.promotion = false;\n\t\tthis.postFile = targetSquare.file;\n\t\tthis.postRank = targetSquare.rank;\n\t\tthis.prevFile = originSquare.file;\n\t\tthis.prevRank = originSquare.rank;\n\t}\n}\n\nexport default { Game, Move };\n"],"file":"game.js"}